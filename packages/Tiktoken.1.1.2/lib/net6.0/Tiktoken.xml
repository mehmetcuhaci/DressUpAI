<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tiktoken</name>
    </assembly>
    <members>
        <member name="T:Tiktoken.CoreBpe">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tiktoken.CoreBpe.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Byte[],System.Int32},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Int32},System.String)">
            <summary>
            
            </summary>
            <param name="encoder"></param>
            <param name="specialTokensEncoder"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:Tiktoken.CoreBpe.CountTokensNative(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.CoreBpe.EncodeNative(System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="allowedSpecial"></param>
            <param name="disallowedSpecial"></param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.CoreBpe.Explore(System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="allowedSpecial"></param>
            <param name="disallowedSpecial"></param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.CoreBpe.DecodeNative(System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="T:Tiktoken.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tiktoken.Encoding.ForModel(System.String)">
            <summary>
            Returns encoding by model name.
            </summary>
            <param name="modelName">gpt-3.5-turbo</param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.Encoding.Get(System.String)">
            <summary>
            Returns encoding by name.
            </summary>
            <param name="encodingName">cl100k_base</param>
            <returns></returns>
        </member>
        <member name="P:Tiktoken.Encoding.EnableCache">
            <summary>
            Enable cache for fast encoding.
            Default: true.
            </summary>
        </member>
        <member name="M:Tiktoken.Encoding.#ctor(Tiktoken.Models.EncodingSettingModel)">
            <summary>
            
            </summary>
            <param name="setting"></param>
        </member>
        <member name="M:Tiktoken.Encoding.CountTokens(System.String)">
            <summary>
            Counts tokens in fast mode. Does not take into account special tokens.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.Encoding.Encode(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.Explore(System.String)">
            <summary>
            Returns tokens from the processing stage as a list of strings.
            This would enhance visibility over the tokenization process, facilitate token manipulation,
            and could serve as a useful tool for educational purposes.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.EncodeWithAllAllowedSpecial(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.EncodeWithAllDisallowedSpecial(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.EncodeWithAllowedSpecial(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="allowedSpecial"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.EncodeWithDisallowedSpecial(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="disallowedSpecial"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Tiktoken.Encoding.Decode(System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
            
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="T:Tiktoken.Encodings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tiktoken.Encodings.Cl100KBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tiktoken.Encodings.P50KBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tiktoken.Encodings.P50KEdit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tiktoken.Encodings.R50KBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tiktoken.Models.EncodingSettingModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tiktoken.Models.EncodingSettingModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tiktoken.Models.EncodingSettingModel.Pattern">
            <summary>
            regex
            </summary>
        </member>
        <member name="P:Tiktoken.Models.EncodingSettingModel.ExplicitNVocab">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tiktoken.Models.EncodingSettingModel.MergeableRanks">
            <summary>
            tiktoken file
            </summary>
        </member>
        <member name="P:Tiktoken.Models.EncodingSettingModel.SpecialTokens">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tiktoken.Services.EncodingManager.Get(System.String)">
            <summary>
            Returns encoding setting by encoding name.
            </summary>
            <param name="encodingName">cl100k_base p50k_base ...</param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.Services.Helpers.GetNameByModel(System.String)">
            <summary>
            Returns encoding name by model name or throws exception.
            </summary>
            <param name="modelName">gpt-4 gpt-3.5-turbo ...</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:Tiktoken.Utilities.ByteArrayComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tiktoken.Utilities.ByteArrayComparer.Equals(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tiktoken.Utilities.ByteArrayComparer.GetHashCode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Tiktoken.Utilities.BytePairEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
    </members>
</doc>
